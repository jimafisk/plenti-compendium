/* generated by Svelte v3.38.3 */
import {
	HtmlTag,
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_html_tag,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (6:2) {#if i >= postRangeLow && i < postRangeHigh}
function create_if_block(ctx) {
	let div2;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div1;
	let h3;
	let a0;
	let t1_value = /*post*/ ctx[3].fields.title + "";
	let t1;
	let a0_href_value;
	let t2;
	let ul;
	let li0;
	let i;
	let t3;
	let a1;
	let t4_value = /*post*/ ctx[3].fields.author.name + "";
	let t4;
	let a1_href_value;
	let t5;
	let li1;
	let t6;
	let t7_value = /*post*/ ctx[3].fields.dateCreated + "";
	let t7;
	let t8;
	let li2;
	let t9;
	let t10_value = /*post*/ ctx[3].fields.dateModified + "";
	let t10;
	let t11;
	let li3;
	let t12;
	let t13;
	let li4;
	let t14;
	let t15;
	let p0;
	let html_tag;
	let raw_value = /*post*/ ctx[3].fields.articleBody.substring(0, Math.min(175, /*post*/ ctx[3].fields.articleBody.substring(0, 175).lastIndexOf(" "))) + "";
	let t16;
	let span;
	let t17;
	let t18;
	let article;
	let div0;
	let p1;
	let t19;
	let a2;
	let t20;
	let a2_href_value;
	let t21;
	let each_value_2 = /*post*/ ctx[3].fields.categories;
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*post*/ ctx[3].fields.tags;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			div2 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			h3 = element("h3");
			a0 = element("a");
			t1 = text(t1_value);
			t2 = space();
			ul = element("ul");
			li0 = element("li");
			i = element("i");
			t3 = space();
			a1 = element("a");
			t4 = text(t4_value);
			t5 = space();
			li1 = element("li");
			t6 = text("Created : ");
			t7 = text(t7_value);
			t8 = space();
			li2 = element("li");
			t9 = text("Updated : ");
			t10 = text(t10_value);
			t11 = space();
			li3 = element("li");
			t12 = text("Categories :\n            ");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t13 = space();
			li4 = element("li");
			t14 = text("Tags :\n            ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t15 = space();
			p0 = element("p");
			html_tag = new HtmlTag();
			t16 = space();
			span = element("span");
			t17 = text("...");
			t18 = space();
			article = element("article");
			div0 = element("div");
			p1 = element("p");
			t19 = space();
			a2 = element("a");
			t20 = text("Continue Reading");
			t21 = space();
			this.h();
		},
		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			img = claim_element(div2_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			a0 = claim_element(h3_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, t1_value);
			a0_nodes.forEach(detach);
			h3_nodes.forEach(detach);
			t2 = claim_space(div1_nodes);
			ul = claim_element(div1_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			i = claim_element(li0_nodes, "I", { class: true });
			children(i).forEach(detach);
			t3 = claim_space(li0_nodes);
			a1 = claim_element(li0_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t4 = claim_text(a1_nodes, t4_value);
			a1_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t5 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			t6 = claim_text(li1_nodes, "Created : ");
			t7 = claim_text(li1_nodes, t7_value);
			li1_nodes.forEach(detach);
			t8 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			t9 = claim_text(li2_nodes, "Updated : ");
			t10 = claim_text(li2_nodes, t10_value);
			li2_nodes.forEach(detach);
			t11 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			t12 = claim_text(li3_nodes, "Categories :\n            ");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(li3_nodes);
			}

			li3_nodes.forEach(detach);
			t13 = claim_space(ul_nodes);
			li4 = claim_element(ul_nodes, "LI", { class: true });
			var li4_nodes = children(li4);
			t14 = claim_text(li4_nodes, "Tags :\n            ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li4_nodes);
			}

			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t15 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			html_tag = claim_html_tag(p0_nodes);
			t16 = claim_space(p0_nodes);
			span = claim_element(p0_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t17 = claim_text(span_nodes, "...");
			span_nodes.forEach(detach);
			p0_nodes.forEach(detach);
			t18 = claim_space(div1_nodes);
			article = claim_element(div1_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			div0 = claim_element(article_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p1 = claim_element(div0_nodes, "P", { class: true });
			children(p1).forEach(detach);
			t19 = claim_space(div0_nodes);
			a2 = claim_element(div0_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t20 = claim_text(a2_nodes, "Continue Reading");
			a2_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			article_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t21 = claim_space(div2_nodes);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img, "class", "w-full md:h-52 lg:h-60 object-cover");
			if (img.src !== (img_src_value = "assets/posts/" + /*post*/ ctx[3].fields.image.src)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*post*/ ctx[3].fields.image.alt);
			attr(a0, "href", a0_href_value = /*post*/ ctx[3].path);
			attr(h3, "class", "header mb-2");
			attr(i, "class", "las la-user-astronaut text-base");
			attr(a1, "href", a1_href_value = /*post*/ ctx[3].fields.author.url);
			attr(li0, "class", "px-1 inline-flex");
			attr(li1, "class", "px-1 inline-flex");
			attr(li2, "class", "px-1 inline-flex");
			attr(li3, "class", "px-1 inline-flex");
			attr(li4, "class", "px-1 inline-flex");
			attr(ul, "class", "text-meta flex flex-wrap mb-4");
			html_tag.a = t16;
			attr(span, "class", "font-bold");
			attr(p0, "class", "text-base");
			attr(p1, "class", "mb-6");
			attr(a2, "href", a2_href_value = /*post*/ ctx[3].path);
			attr(a2, "class", "btn-outline hover:white");
			attr(div0, "class", "mb-4");
			attr(article, "class", "border-0");
			attr(div1, "class", "px-5 py-4");
			attr(div2, "class", "rounded-lg overflow-hidden shadow-md bg-secondary");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, img);
			append(div2, t0);
			append(div2, div1);
			append(div1, h3);
			append(h3, a0);
			append(a0, t1);
			append(div1, t2);
			append(div1, ul);
			append(ul, li0);
			append(li0, i);
			append(li0, t3);
			append(li0, a1);
			append(a1, t4);
			append(ul, t5);
			append(ul, li1);
			append(li1, t6);
			append(li1, t7);
			append(ul, t8);
			append(ul, li2);
			append(li2, t9);
			append(li2, t10);
			append(ul, t11);
			append(ul, li3);
			append(li3, t12);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(li3, null);
			}

			append(ul, t13);
			append(ul, li4);
			append(li4, t14);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li4, null);
			}

			append(div1, t15);
			append(div1, p0);
			html_tag.m(raw_value, p0);
			append(p0, t16);
			append(p0, span);
			append(span, t17);
			append(div1, t18);
			append(div1, article);
			append(article, div0);
			append(div0, p1);
			append(div0, t19);
			append(div0, a2);
			append(a2, t20);
			append(div2, t21);
		},
		p(ctx, dirty) {
			if (dirty & /*allPosts*/ 1 && img.src !== (img_src_value = "assets/posts/" + /*post*/ ctx[3].fields.image.src)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*allPosts*/ 1 && img_alt_value !== (img_alt_value = /*post*/ ctx[3].fields.image.alt)) {
				attr(img, "alt", img_alt_value);
			}

			if (dirty & /*allPosts*/ 1 && t1_value !== (t1_value = /*post*/ ctx[3].fields.title + "")) set_data(t1, t1_value);

			if (dirty & /*allPosts*/ 1 && a0_href_value !== (a0_href_value = /*post*/ ctx[3].path)) {
				attr(a0, "href", a0_href_value);
			}

			if (dirty & /*allPosts*/ 1 && t4_value !== (t4_value = /*post*/ ctx[3].fields.author.name + "")) set_data(t4, t4_value);

			if (dirty & /*allPosts*/ 1 && a1_href_value !== (a1_href_value = /*post*/ ctx[3].fields.author.url)) {
				attr(a1, "href", a1_href_value);
			}

			if (dirty & /*allPosts*/ 1 && t7_value !== (t7_value = /*post*/ ctx[3].fields.dateCreated + "")) set_data(t7, t7_value);
			if (dirty & /*allPosts*/ 1 && t10_value !== (t10_value = /*post*/ ctx[3].fields.dateModified + "")) set_data(t10, t10_value);

			if (dirty & /*allPosts*/ 1) {
				each_value_2 = /*post*/ ctx[3].fields.categories;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(li3, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (dirty & /*allPosts*/ 1) {
				each_value_1 = /*post*/ ctx[3].fields.tags;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(li4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty & /*allPosts*/ 1 && raw_value !== (raw_value = /*post*/ ctx[3].fields.articleBody.substring(0, Math.min(175, /*post*/ ctx[3].fields.articleBody.substring(0, 175).lastIndexOf(" "))) + "")) html_tag.p(raw_value);

			if (dirty & /*allPosts*/ 1 && a2_href_value !== (a2_href_value = /*post*/ ctx[3].path)) {
				attr(a2, "href", a2_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (28:23) {#if i < post.fields.categories.length - 1}
function create_if_block_2(ctx) {
	let t;

	return {
		c() {
			t = text(",\n                ");
		},
		l(nodes) {
			t = claim_text(nodes, ",\n                ");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (26:12) {#each post.fields.categories as catg, i}
function create_each_block_2(ctx) {
	let a;
	let t_value = /*catg*/ ctx[8] + "";
	let t;
	let a_href_value;
	let if_block = /*i*/ ctx[5] < /*post*/ ctx[3].fields.categories.length - 1 && create_if_block_2(ctx);

	return {
		c() {
			a = element("a");
			t = text(t_value);
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			if (if_block) if_block.l(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = "categories/" + /*catg*/ ctx[8]);
			attr(a, "class", "ml-1");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
			if (if_block) if_block.m(a, null);
		},
		p(ctx, dirty) {
			if (dirty & /*allPosts*/ 1 && t_value !== (t_value = /*catg*/ ctx[8] + "")) set_data(t, t_value);

			if (/*i*/ ctx[5] < /*post*/ ctx[3].fields.categories.length - 1) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(a, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*allPosts*/ 1 && a_href_value !== (a_href_value = "categories/" + /*catg*/ ctx[8])) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
		}
	};
}

// (37:22) {#if i < post.fields.tags.length - 1}
function create_if_block_1(ctx) {
	let t;

	return {
		c() {
			t = text(", ");
		},
		l(nodes) {
			t = claim_text(nodes, ", ");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (35:12) {#each post.fields.tags as tag, i}
function create_each_block_1(ctx) {
	let a;
	let t_value = /*tag*/ ctx[6] + "";
	let t;
	let a_href_value;
	let if_block = /*i*/ ctx[5] < /*post*/ ctx[3].fields.tags.length - 1 && create_if_block_1(ctx);

	return {
		c() {
			a = element("a");
			t = text(t_value);
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			if (if_block) if_block.l(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = "tags/" + /*tag*/ ctx[6]);
			attr(a, "class", "ml-1");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
			if (if_block) if_block.m(a, null);
		},
		p(ctx, dirty) {
			if (dirty & /*allPosts*/ 1 && t_value !== (t_value = /*tag*/ ctx[6] + "")) set_data(t, t_value);

			if (/*i*/ ctx[5] < /*post*/ ctx[3].fields.tags.length - 1) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(a, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*allPosts*/ 1 && a_href_value !== (a_href_value = "tags/" + /*tag*/ ctx[6])) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
		}
	};
}

// (5:0) {#each allPosts as post, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*i*/ ctx[5] >= /*postRangeLow*/ ctx[2] && /*i*/ ctx[5] < /*postRangeHigh*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*i*/ ctx[5] >= /*postRangeLow*/ ctx[2] && /*i*/ ctx[5] < /*postRangeHigh*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let each_1_anchor;
	let each_value = /*allPosts*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*allPosts, Math, postRangeLow, postRangeHigh*/ 7) {
				each_value = /*allPosts*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { allPosts } = $$props,
		{ postRangeHigh } = $$props,
		{ postRangeLow } = $$props;

	$$self.$$set = $$props => {
		if ("allPosts" in $$props) $$invalidate(0, allPosts = $$props.allPosts);
		if ("postRangeHigh" in $$props) $$invalidate(1, postRangeHigh = $$props.postRangeHigh);
		if ("postRangeLow" in $$props) $$invalidate(2, postRangeLow = $$props.postRangeLow);
	};

	return [allPosts, postRangeHigh, postRangeLow];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			allPosts: 0,
			postRangeHigh: 1,
			postRangeLow: 2
		});
	}
}

export default Component;