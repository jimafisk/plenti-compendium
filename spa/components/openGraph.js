/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	claim_element,
	claim_space,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} from "svelte/internal";

function create_fragment(ctx) {
	let meta0;
	let t0;
	let meta1;
	let t1;
	let meta2;
	let t2;
	let meta3;
	let t3;
	let meta4;
	let t4;
	let meta5;
	let t5;
	let meta6;
	let t6;
	let meta7;

	return {
		c() {
			meta0 = element("meta");
			t0 = space();
			meta1 = element("meta");
			t1 = space();
			meta2 = element("meta");
			t2 = space();
			meta3 = element("meta");
			t3 = space();
			meta4 = element("meta");
			t4 = space();
			meta5 = element("meta");
			t5 = space();
			meta6 = element("meta");
			t6 = space();
			meta7 = element("meta");
			this.h();
		},
		l(nodes) {
			meta0 = claim_element(nodes, "META", { property: true, content: true });
			t0 = claim_space(nodes);
			meta1 = claim_element(nodes, "META", { property: true, content: true });
			t1 = claim_space(nodes);
			meta2 = claim_element(nodes, "META", { property: true, content: true });
			t2 = claim_space(nodes);
			meta3 = claim_element(nodes, "META", { property: true, content: true });
			t3 = claim_space(nodes);
			meta4 = claim_element(nodes, "META", { property: true, content: true });
			t4 = claim_space(nodes);
			meta5 = claim_element(nodes, "META", { property: true, content: true });
			t5 = claim_space(nodes);
			meta6 = claim_element(nodes, "META", { property: true, content: true });
			t6 = claim_space(nodes);
			meta7 = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h() {
			attr(meta0, "property", "og:site_name");
			attr(meta0, "content", /*site_name*/ ctx[2]);
			attr(meta1, "property", "og:title");
			attr(meta1, "content", /*title*/ ctx[3]);
			attr(meta2, "property", "og:description");
			attr(meta2, "content", /*desc*/ ctx[4]);
			attr(meta3, "property", "og:url");
			attr(meta3, "content", /*post_url*/ ctx[0]);
			attr(meta4, "property", "og:image");
			attr(meta4, "content", /*image_url*/ ctx[1]);
			attr(meta5, "property", "og:type");
			attr(meta5, "content", "article");
			attr(meta6, "property", "article:publisher");
			attr(meta6, "content", /*site_name*/ ctx[2]);
			attr(meta7, "property", "article:section");
			attr(meta7, "content", "Posts");
		},
		m(target, anchor) {
			insert(target, meta0, anchor);
			insert(target, t0, anchor);
			insert(target, meta1, anchor);
			insert(target, t1, anchor);
			insert(target, meta2, anchor);
			insert(target, t2, anchor);
			insert(target, meta3, anchor);
			insert(target, t3, anchor);
			insert(target, meta4, anchor);
			insert(target, t4, anchor);
			insert(target, meta5, anchor);
			insert(target, t5, anchor);
			insert(target, meta6, anchor);
			insert(target, t6, anchor);
			insert(target, meta7, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*site_name*/ 4) {
				attr(meta0, "content", /*site_name*/ ctx[2]);
			}

			if (dirty & /*title*/ 8) {
				attr(meta1, "content", /*title*/ ctx[3]);
			}

			if (dirty & /*desc*/ 16) {
				attr(meta2, "content", /*desc*/ ctx[4]);
			}

			if (dirty & /*post_url*/ 1) {
				attr(meta3, "content", /*post_url*/ ctx[0]);
			}

			if (dirty & /*image_url*/ 2) {
				attr(meta4, "content", /*image_url*/ ctx[1]);
			}

			if (dirty & /*site_name*/ 4) {
				attr(meta6, "content", /*site_name*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(meta0);
			if (detaching) detach(t0);
			if (detaching) detach(meta1);
			if (detaching) detach(t1);
			if (detaching) detach(meta2);
			if (detaching) detach(t2);
			if (detaching) detach(meta3);
			if (detaching) detach(t3);
			if (detaching) detach(meta4);
			if (detaching) detach(t4);
			if (detaching) detach(meta5);
			if (detaching) detach(t5);
			if (detaching) detach(meta6);
			if (detaching) detach(t6);
			if (detaching) detach(meta7);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { site_name } = $$props,
		{ title } = $$props,
		{ desc } = $$props,
		{ image } = $$props,
		{ env } = $$props,
		{ path } = $$props;

	let { post_url } = $$props, { image_url } = $$props;

	if (env.local) {
		post_url = path;
		image_url = "assets/" + image.src;
	} else {
		post_url = env.baseurl + path;
		image_url = env.baseurl + "assets/" + image.src;
	}

	$$self.$$set = $$props => {
		if ("site_name" in $$props) $$invalidate(2, site_name = $$props.site_name);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("desc" in $$props) $$invalidate(4, desc = $$props.desc);
		if ("image" in $$props) $$invalidate(5, image = $$props.image);
		if ("env" in $$props) $$invalidate(6, env = $$props.env);
		if ("path" in $$props) $$invalidate(7, path = $$props.path);
		if ("post_url" in $$props) $$invalidate(0, post_url = $$props.post_url);
		if ("image_url" in $$props) $$invalidate(1, image_url = $$props.image_url);
	};

	return [post_url, image_url, site_name, title, desc, image, env, path];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			site_name: 2,
			title: 3,
			desc: 4,
			image: 5,
			env: 6,
			path: 7,
			post_url: 0,
			image_url: 1
		});
	}
}

export default Component;